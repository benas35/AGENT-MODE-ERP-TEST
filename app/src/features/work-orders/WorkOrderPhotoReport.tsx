import { memo, useMemo } from "react";
import {
  Document,
  Page,
  Text,
  View,
  Image,
  StyleSheet,
  PDFDownloadLink,
} from "@react-pdf/renderer";
import { Button } from "@/components/ui/button";
import { WorkOrderMediaItem } from "@/hooks/useWorkOrderMedia";
import { FileDown } from "lucide-react";

const styles = StyleSheet.create({
  page: {
    padding: 32,
    fontSize: 11,
    fontFamily: "Helvetica",
    color: "#111827",
  },
  header: {
    marginBottom: 16,
    borderBottom: "1 solid #e5e7eb",
    paddingBottom: 8,
  },
  title: {
    fontSize: 18,
    fontWeight: 700,
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 12,
    color: "#6b7280",
  },
  section: {
    marginBottom: 16,
  },
  mediaCard: {
    borderRadius: 8,
    border: "1 solid #e5e7eb",
    overflow: "hidden",
    marginBottom: 12,
  },
  mediaImage: {
    width: "100%",
    height: 220,
    objectFit: "cover",
  },
  mediaBody: {
    padding: 12,
    gap: 6,
  },
  caption: {
    fontSize: 12,
    fontWeight: 600,
  },
  meta: {
    fontSize: 10,
    color: "#4b5563",
  },
  footer: {
    marginTop: 24,
    fontSize: 10,
    color: "#6b7280",
    textAlign: "center",
  },
});

const WorkOrderPhotoReportDocument = memo(({ workOrderId, media }: { workOrderId: string; media: WorkOrderMediaItem[] }) => {
  const sortedMedia = useMemo(
    () => [...media].sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime()),
    [media],
  );

  return (
    <Document>
      <Page size="A4" style={styles.page} wrap>
        <View style={styles.header}>
          <Text style={styles.title}>Work order photo report</Text>
          <Text style={styles.subtitle}>Work order ID: {workOrderId}</Text>
          <Text style={styles.subtitle}>Generated: {new Date().toUTCString()}</Text>
          <Text style={styles.subtitle}>Photos included: {media.length}</Text>
        </View>

        <View style={styles.section}>
          {sortedMedia.map((item) => (
            <View key={item.id} style={styles.mediaCard} wrap={false}>
              <Image src={item.url} style={styles.mediaImage} />
              <View style={styles.mediaBody}>
                <Text style={styles.caption}>{item.caption || "Untitled photo"}</Text>
                <Text style={styles.meta}>
                  Category: {item.category.toUpperCase()} • Uploaded {new Date(item.created_at).toLocaleString()}
                </Text>
                {item.uploaded_by_name && <Text style={styles.meta}>Technician: {item.uploaded_by_name}</Text>}
                {item.gps && (
                  <Text style={styles.meta}>
                    GPS: {item.gps.lat.toFixed(4)}, {item.gps.lng.toFixed(4)}
                    {item.gps.accuracy ? ` ±${item.gps.accuracy.toFixed(0)}m` : ""}
                  </Text>
                )}
              </View>
            </View>
          ))}
        </View>

        <Text style={styles.footer}>
          Generated by the ProFix Auto Portal • This report includes technician media annotations and GPS metadata
        </Text>
      </Page>
    </Document>
  );
});
WorkOrderPhotoReportDocument.displayName = "WorkOrderPhotoReportDocument";

interface WorkOrderPhotoReportProps {
  workOrderId: string;
  media: WorkOrderMediaItem[];
}

export const WorkOrderPhotoReport: React.FC<WorkOrderPhotoReportProps> = ({ workOrderId, media }) => {
  return (
    <Button variant="secondary" size="sm" asChild disabled={!media.length}>
      <PDFDownloadLink
        fileName={`${workOrderId}-photo-report.pdf`}
        document={<WorkOrderPhotoReportDocument workOrderId={workOrderId} media={media} />}
      >
        {({ loading }) => (
          <span className="inline-flex items-center gap-2">
            <FileDown className="h-4 w-4" />
            {loading ? "Preparing PDF..." : "Export PDF"}
          </span>
        )}
      </PDFDownloadLink>
    </Button>
  );
};
